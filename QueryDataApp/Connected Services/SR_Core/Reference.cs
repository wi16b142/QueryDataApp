//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QueryDataApp.SR_Core {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SR_Core.IServiceCore")]
    public interface IServiceCore {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCore/AddDataToRepo", ReplyAction="http://tempuri.org/IServiceCore/AddDataToRepoResponse")]
        bool AddDataToRepo(string repo, Shared.XData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCore/AddDataToRepo", ReplyAction="http://tempuri.org/IServiceCore/AddDataToRepoResponse")]
        System.Threading.Tasks.Task<bool> AddDataToRepoAsync(string repo, Shared.XData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCore/GetAvailableRepos", ReplyAction="http://tempuri.org/IServiceCore/GetAvailableReposResponse")]
        string[] GetAvailableRepos();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCore/GetAvailableRepos", ReplyAction="http://tempuri.org/IServiceCore/GetAvailableReposResponse")]
        System.Threading.Tasks.Task<string[]> GetAvailableReposAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCore/GetAvailableTypes", ReplyAction="http://tempuri.org/IServiceCore/GetAvailableTypesResponse")]
        string[] GetAvailableTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCore/GetAvailableTypes", ReplyAction="http://tempuri.org/IServiceCore/GetAvailableTypesResponse")]
        System.Threading.Tasks.Task<string[]> GetAvailableTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCore/GetDataFromRepo", ReplyAction="http://tempuri.org/IServiceCore/GetDataFromRepoResponse")]
        Shared.XData[] GetDataFromRepo(string repo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCore/GetDataFromRepo", ReplyAction="http://tempuri.org/IServiceCore/GetDataFromRepoResponse")]
        System.Threading.Tasks.Task<Shared.XData[]> GetDataFromRepoAsync(string repo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceCoreChannel : QueryDataApp.SR_Core.IServiceCore, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceCoreClient : System.ServiceModel.ClientBase<QueryDataApp.SR_Core.IServiceCore>, QueryDataApp.SR_Core.IServiceCore {
        
        public ServiceCoreClient() {
        }
        
        public ServiceCoreClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceCoreClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceCoreClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceCoreClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddDataToRepo(string repo, Shared.XData data) {
            return base.Channel.AddDataToRepo(repo, data);
        }
        
        public System.Threading.Tasks.Task<bool> AddDataToRepoAsync(string repo, Shared.XData data) {
            return base.Channel.AddDataToRepoAsync(repo, data);
        }
        
        public string[] GetAvailableRepos() {
            return base.Channel.GetAvailableRepos();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAvailableReposAsync() {
            return base.Channel.GetAvailableReposAsync();
        }
        
        public string[] GetAvailableTypes() {
            return base.Channel.GetAvailableTypes();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAvailableTypesAsync() {
            return base.Channel.GetAvailableTypesAsync();
        }
        
        public Shared.XData[] GetDataFromRepo(string repo) {
            return base.Channel.GetDataFromRepo(repo);
        }
        
        public System.Threading.Tasks.Task<Shared.XData[]> GetDataFromRepoAsync(string repo) {
            return base.Channel.GetDataFromRepoAsync(repo);
        }
    }
}
