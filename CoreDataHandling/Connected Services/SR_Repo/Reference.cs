//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CoreDataHandling.SR_Repo {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SR_Repo.IServiceRepo")]
    public interface IServiceRepo {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRepo/QueryAvailableResources", ReplyAction="http://tempuri.org/IServiceRepo/QueryAvailableResourcesResponse")]
        System.Collections.Generic.List<string> QueryAvailableResources();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRepo/QueryAvailableResources", ReplyAction="http://tempuri.org/IServiceRepo/QueryAvailableResourcesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> QueryAvailableResourcesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRepo/QueryAvailableTypes", ReplyAction="http://tempuri.org/IServiceRepo/QueryAvailableTypesResponse")]
        System.Collections.Generic.List<string> QueryAvailableTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRepo/QueryAvailableTypes", ReplyAction="http://tempuri.org/IServiceRepo/QueryAvailableTypesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> QueryAvailableTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRepo/QueryAllDataFromRepo", ReplyAction="http://tempuri.org/IServiceRepo/QueryAllDataFromRepoResponse")]
        System.Collections.Generic.List<Shared.XData> QueryAllDataFromRepo(string repo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRepo/QueryAllDataFromRepo", ReplyAction="http://tempuri.org/IServiceRepo/QueryAllDataFromRepoResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Shared.XData>> QueryAllDataFromRepoAsync(string repo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRepo/AddDataToRepo", ReplyAction="http://tempuri.org/IServiceRepo/AddDataToRepoResponse")]
        bool AddDataToRepo(string repo, Shared.XData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRepo/AddDataToRepo", ReplyAction="http://tempuri.org/IServiceRepo/AddDataToRepoResponse")]
        System.Threading.Tasks.Task<bool> AddDataToRepoAsync(string repo, Shared.XData data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceRepoChannel : CoreDataHandling.SR_Repo.IServiceRepo, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceRepoClient : System.ServiceModel.ClientBase<CoreDataHandling.SR_Repo.IServiceRepo>, CoreDataHandling.SR_Repo.IServiceRepo {
        
        public ServiceRepoClient() {
        }
        
        public ServiceRepoClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceRepoClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceRepoClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceRepoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<string> QueryAvailableResources() {
            return base.Channel.QueryAvailableResources();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> QueryAvailableResourcesAsync() {
            return base.Channel.QueryAvailableResourcesAsync();
        }
        
        public System.Collections.Generic.List<string> QueryAvailableTypes() {
            return base.Channel.QueryAvailableTypes();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> QueryAvailableTypesAsync() {
            return base.Channel.QueryAvailableTypesAsync();
        }
        
        public System.Collections.Generic.List<Shared.XData> QueryAllDataFromRepo(string repo) {
            return base.Channel.QueryAllDataFromRepo(repo);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Shared.XData>> QueryAllDataFromRepoAsync(string repo) {
            return base.Channel.QueryAllDataFromRepoAsync(repo);
        }
        
        public bool AddDataToRepo(string repo, Shared.XData data) {
            return base.Channel.AddDataToRepo(repo, data);
        }
        
        public System.Threading.Tasks.Task<bool> AddDataToRepoAsync(string repo, Shared.XData data) {
            return base.Channel.AddDataToRepoAsync(repo, data);
        }
    }
}
